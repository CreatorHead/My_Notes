1. How to create JDBC Connection?

	Steps to create JDBC connection:

	    Register the database driver with java.sql.DriverManager, where DriverManager is a class which is given under JDBC specifications. You can do this by loading driver implementation class into the JVM by using Class.forName().
	    Open a session to database, i.e. establish a connection to database. You can do this by calling DriverManager.getConnection() method, which returns Connection object.

2. What is Statement & ResultSet in JDBC?

	JDBC Statement:

	java.sql.Statement is an interface. It provides some methods through which we can submit SQL queries to the database. It will be implemented by driver implementation providers. createStatement() method on Connection object will return Statement object.

	JDBC ResultSet:

	java.sql.ResultSet also an interface and is used to retrieve SQL select query results. A ResultSet object maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row. The next method moves the cursor to the next row, and because it returns false when there are no more rows in the ResultSet object, it can be used in a while loop to iterate through the result set. It provides getXXX() methods to get data from each iteration. Here XXX represents datatypes.

3. How to execute and read select queries using JDBC?

	How to read records from SQL select query. By using Statement.executeQuery() you can execute select statements. JDBC ResultSet object provides methods to read each column details on each row.

4. How to update a record in the database using JDBC?

	How to update table records using SQL update query. By using Statement.executeUpdate() you can execute update statements. Statement.executeUpdate() method returns you number of records got updated.

5. How to execute any type of query in JDBC?

	The Statement.execute() method allows us to execute any kind of query like select, update. It returns boolean. If the return value is true, then it executed select query, get the ResultSet object and read the resulted records. If it returns false, then it can be update query, call getUpdateCount() method to get total records updated.

6. What are the types of JDBC Statements available?

	There are 3 types of Statements, as given below:

	Statement:

	It can be used for general-purpose access to the database. It is useful when you are using static SQL statements at runtime.

	PreparedStatement:

	It can be used when you plan to use the same SQL statement many times. The PreparedStatement interface accepts input parameters at runtime.

	CallableStatement:

	CallableStatement can be used when you want to access database stored procedures.

7. Write an example code for JDBC prepared statement.

	JDBC PreparedStatement can be used when you plan to use the same SQL statement many times. It is used to handle precompiled query. If we want to execute same query with different values for more than one time then precompiled queries will reduce the no of compilations. Connection.prepareStatement() method can provide you PreparedStatment object. This object provides setXXX() methods to provide query values.

8. How to get primary key value (auto-generated keys) from inserted queries using 		JDBC? 
	String query = "insert into emps (name, dept, salary) values (?,?,?)";
            pstmt = con.prepareStatement(query,Statement.RETURN_GENERATED_KEYS);
            pstmt.setString(1, "John");
            pstmt.setString(2, "Acc Dept");
            pstmt.setInt(3, 10000);
            pstmt.executeUpdate();
            rs = pstmt.getGeneratedKeys();
            if(rs != null && rs.next()){
                System.out.println("Generated Emp Id: "+rs.getInt(1));
            }

9. Write a simple program for CallableStatement statement to execute stored procedure. 
A:  import java.sql.CallableStatement;
	import java.sql.Connection;
	import java.sql.DriverManager;
	import java.sql.SQLException;
 
	public class MySimpleCallableStatement {
     
    	public static void main(String a[]){
         
	        Connection con = null;
	        CallableStatement callSt = null;
	        try {
	            Class.forName("oracle.jdbc.driver.OracleDriver");
	            con = DriverManager.
	                getConnection("jdbc:oracle:thin:@<hostname>:<port num>:<DB name>"
	                    ,"user","password");
	            callSt = con.prepareCall("{call myprocedure(?,?)}");
	            callSt.setInt(1,200);
	            callSt.setDouble(2, 3000);
	            callSt.execute();
	            System.out.println("Executed stored procedure!!!");
	        } catch (ClassNotFoundException e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	        } catch (SQLException e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	        } finally{
	            try{
	                if(callSt != null) callSt.close();
	                if(con != null) con.close();
	            } catch(Exception ex){}
	        }
	    }
  }

 10. How to get column properties from ResultSet using ResultSetMetaData?
 A:  ResultSetMetaData is an object that can be used to get information about the 		types and properties of the columns in a ResultSet object. Below example shows 		how to get ResultSet column properties using ResultSetMetaData object.
 	public static void main(String a[]){
         
        Connection con = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            con = DriverManager.
                getConnection("jdbc:oracle:thin:@<hostname>:<port num>:<DB name>"
                    ,"user","password");
            st = con.createStatement();
            rs = st.executeQuery("select * from emp");
            ResultSetMetaData rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();
            for(int i=0;i<=columnCount;i++){
                System.out.println(rsmd.getColumnName(i));
                System.out.println(rsmd.getColumnType(i));
            }
        } catch (ClassNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } finally{
            try{
                if(rs != null) rs.close();
                if(st != null) st.close();
                if(con != null) con.close();
            } catch(Exception ex){}
        }
    }

11. Write an example for batch update using Statement?
A:	Batch update is nothing but executing set of queries at a time. Batch updates 		reduces number of database calls. In batch processing, batch should not contain 	select query. You can add queries by calling addBatch() method and can execute 		the bunch of queries by calling executeBatch() method. When using batch updates 	with Statement object, you can use multiple types of queries which can be 			acceptable in executeUpdate() method.

	public static void main(String a[]){
         
        Connection con = null;
        Statement st = null;
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            con = DriverManager.
                getConnection("jdbc:oracle:thin:@<hostname>:<port num>:<DB name>"
                    ,"user","password");
            con.setAutoCommit(false);
            st = con.createStatement();
            st.addBatch("update emp set sal=3000 where empid=200");
            st.addBatch("insert into emp values (100,4000)");
            st.addBatch("update emp set emp name='Ram' where empid=345");
            int count[] = st.executeBatch();
            for(int i=1;i<=count.length;i++){
                System.out.println("Query "+i+" has effected "+count[i]+" times");
            }
            con.commit();
        } catch (ClassNotFoundException e) {
            try {
                con.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
            e.printStackTrace();
        } catch (SQLException e) {
            try {
                con.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
            e.printStackTrace();
        } finally{
            try{
                if(st != null) st.close();
                if(con != null) con.close();
            } catch(Exception ex){}
        }
    }

12. Write an example for batch update using PreparedStatement? 
	Batch update is nothing but executing set of queries at a time. Batch updates reduces number of database calls. In batch processing, batch should not contain select query. When we are using PreparedStatement to execute batch update, we have to run the same query multiple times. Below examples shows how to do batch updates with PreparedStatement.
	public static void main(String a[]){
         
        Connection con = null;
        PreparedStatement pst = null;
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            con = DriverManager.
                    getConnection("jdbc:oracle:thin:@<hostname>:<port num>:<DB name>"
                        ,"user","password");
            con.setAutoCommit(false);
            pst = con.prepareStatement("update emp set sal=? where empid=?");
            pst.setInt(1, 3000);
            pst.setInt(2, 200);
            pst.addBatch();
            pst.setInt(1, 4000);
            pst.setInt(2, 230);
            pst.addBatch();
            int count[] = pst.executeBatch();
            for(int i=1;i<=count.length;i++){
                System.out.println("Query "+i+" has effected "+count[i]+" times");
            }
            con.commit();
        } catch (ClassNotFoundException e) {
            try {
                con.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
            e.printStackTrace();
        } catch (SQLException e) {
            try {
                con.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
            e.printStackTrace();
        } finally{
            try{
                if(pst != null) pst.close();
                if(con != null) con.close();
            } catch(Exception ex){}
        }
    }

13. What are the types of ResultSets in JDBC?

	The type of a ResultSet object determines the level of its functionality in two areas: the ways in which the cursor can be manipulated, and how concurrent changes made to the underlying data source are reflected by the ResultSet object. The sensitivity of a ResultSet object is determined by one of three different ResultSet types:

	TYPE_FORWARD_ONLY:

	The result set cannot be scrolled; its cursor moves forward only, from before the first row to after the last row. The rows contained in the result set depend on how the underlying database generates the results. That is, it contains the rows that satisfy the query at either the time the query is executed or as the rows are retrieved.

	TYPE_SCROLL_INSENSITIVE:

	The result can be scrolled; its cursor can move both forward and backward relative to the current position, and it can move to an absolute position. The result set is insensitive to changes made to the underlying data source while it is open. It contains the rows that satisfy the query at either the time the query is executed or as the rows are retrieved.

	TYPE_SCROLL_SENSITIVE:

	The result can be scrolled; its cursor can move both forward and backward relative to the current position, and it can move to an absolute position. The result set reflects changes made to the underlying data source while the result set remains open.

	The default ResultSet type is TYPE_FORWARD_ONLY.

14. Write an example for scrollable result set with read only mode.
	public static void main(String a[]){
        Connection con = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            con = DriverManager.
                getConnection("jdbc:oracle:thin:@<hostname>:<port num>:<DB name>"
                    ,"user","password");
            st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                            ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery("select accno, bal from bank");
            System.out.println("ResultSet Curson is at before first: "+rs.isBeforeFirst());
            while(rs.next()){
                System.out.println(rs.getInt(1)+"   "+rs.getDouble(2));
            }
            //now result set cursor reached the last position
            System.out.println("Is After Last: "+rs.isAfterLast());
            while(rs.previous()){
                System.out.println(rs.getInt(1)+"   "+rs.getDouble(2));
            }
        } catch (ClassNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } finally{
            try{
                if(rs != null) rs.close();
                if(st != null) st.close();
                if(con != null) con.close();
            } catch(Exception ex){}
        }
    }

15. How to insert an image into database table? or Write an example for inserting BLOB into table.
	public static void main(String a[]){
	         
	        Connection con = null;
	        PreparedStatement ps = null;
	        InputStream is = null;
	        try {
	            Class.forName("oracle.jdbc.driver.OracleDriver");
	            con = DriverManager.
	                    getConnection("jdbc:oracle:thin:@<hostname>:<port num>:<DB name>"
	                        ,"user","password");
	            ps = con.prepareCall("insert into student_profile values (?,?)");
	            ps.setInt(1, 101);
	            is = new FileInputStream(new File("Student_img.jpg"));
	            ps.setBinaryStream(2, is);
	            int count = ps.executeUpdate();
	            System.out.println("Count: "+count);
	        } catch (ClassNotFoundException e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	        } catch (SQLException e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	        } catch (FileNotFoundException e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	        } finally{
	            try{
	                if(is != null) is.close();
	                if(ps != null) ps.close();
	                if(con != null) con.close();
	            } catch(Exception ex){}
	        }
	    }

16. How to read an image from database table? or Write an example for reading BLOB from table.
	public static void main(String a[]){
	         
	        Connection con = null;
	        Statement st = null;
	        ResultSet rs = null;
	        InputStream is = null;
	        OutputStream os = null;
	        try {
	            Class.forName("oracle.jdbc.driver.OracleDriver");
	            con = DriverManager.
	                    getConnection("jdbc:oracle:thin:@<hostname>:<port num>:<DB name>
	                        ,"user","password");
	            st = con.createStatement();
	            rs = st.executeQuery("select student_img from student_profile where id=101");
	            if(rs.next()){
	                is = rs.getBinaryStream(1);
	            }
	            is = new FileInputStream(new File("Student_img.jpg"));
	            os = new FileOutputStream("std_img.jpg");
	            byte[] content = new byte[1024];
	            int size = 0;
	            while((size = is.read(content)) != -1){
	                os.write(content, 0, size);
	            }
	        } catch (ClassNotFoundException e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	        } catch (SQLException e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	        } catch (FileNotFoundException e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	        } catch (IOException e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	        } finally{
	            try{
	                if(is != null) is.close();
	                if(os != null) os.close();
	                if(st != null) st.close();
	                if(con != null) con.close();
	            } catch(Exception ex){}
	        }
	    }

17. What is DatabaseMetaData? Write an example code.
	DatabaseMetaData is used to know which type of driver we are using and whether is it compatable or JDBC complaint or not. It is used to know all details about database provider as well.

	public static void main(String a[]){
         
        Connection con = null;
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            con = DriverManager.
                getConnection("jdbc:oracle:thin:@<hostname>:<port num>:<DB name>"
                        ,"user","password");
            DatabaseMetaData dm = con.getMetaData();
            System.out.println(dm.getDriverVersion());
            System.out.println(dm.getDriverName());
            System.out.println(dm.getDatabaseProductName());
            System.out.println(dm.getDatabaseProductVersion());
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } finally{
            if(con != null){}
                try {
                    con.close();
                } catch (SQLException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
    }