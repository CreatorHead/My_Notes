install.packages(c("dplyr", "readr", "readxl"))
### Export Data
# Export data to use outside of R: You can export your datasets as .csv file
# using the write.csv() function
# Export data for later use in R: You can export your datasets as R objects called .RDS file
# using saveRDS(). You can import them into R using readRDS(). These execute a lot faster.
# Import Libraries
library(readr)
library((readxl))
## Setting up the Working directory
setwd("F:/Workspace/Working With R/DataSets") # TO set a Working Dir
# Import first dataset
Countries = read_csv("Countries+Population.csv")
summary(Countries)
# Clean column names and set right data types
colnames(Countries) = make.names(colnames(Countries))
Countries$Country.Name = as.factor(Countries$Country.Name)
Countries$Country.Code = as.factor(Countries$Country.Code)
summary(Countries)
# Import second dataset
Countries_Map = readxl::read_excel("Countries Region Mapping.xlsx")
View(Countries_Map)
# Set right data types
Countries_Map$Country.Code = as.factor(Countries_Map$Country.Code)
Countries_Map$Region = as.factor(Countries_Map$Region)
Countries_Map$IncomeGroup = as.factor(Countries_Map$IncomeGroup)
summary(Countries_Map$IncomeGroup)
# Set to ordered factor, and give order
Countries_Map$IncomeGroup = ordered(Countries_Map$IncomeGroup, levels = c("Low income",
"Lower middle income",
"Upper middle income",
"High income"))
class(Countries_Map$IncomeGroup)
summary(Countries_Map$IncomeGroup)
# Import Third Dataset
Countries_Info = read_csv("Countries+Indicators.csv")
colnames(Countries_Info) = make.names(colnames(Countries_Info))
Countries_Info$Country.Code = as.factor(Countri)
summary(Countries_Info)
# Correct Inner Join
Countries_All = merge(Countries, Countries_Map, by = "Country.Code")
# Correct Left Join
Countries_All = merge(Countries_All, Countries_Info, by = "Country.Code", all.x = TRUE)
## table()
Region_vs_Income_Cat = table(Countries_All$Region, Countries_All$IncomeGroup)
Region_vs_Income_Cat
prop.table(Region_vs_Income_Cat, 1) # Row Total is equal to 1
prop.table(Region_vs_Income_Cat, 2) # Column Total is equal to 1
## %>% group_by()
install.packages("dplyr")
library(dplyr)
# Extract the different Regions
Region_Sum = Countries_All %>% group_by(Region) %>% summarise()
View(Region_Sum)
# Extract different combination of Regions and Income Groups
Region_Income_Sum = Countries_All %>% group_by(Region, IncomeGroup) %>% summarise()
View(Region_Income_Sum)
# Same with amount of countries in each categories
# Region_Income_Sum = Countries_All %>% group_by(Region, IncomeGroup) %>% summarise(Count = n())
Region_Income_Sum = Countries_All %>% group_by(Region, IncomeGroup) %>% summarise(Number.Of.Countries = n())
View(Region_Income_Sum)
# Amount of different income groups per region
Region_sum = Countries_All %>% group_by(Region) %>% summarise(Different.Income.Groups = n_distinct(IncomeGroup))
View(Region_sum)
## Big Summary about each region
Region_sum= Countries_All %>% group_by(Region) %>% summarise(Number.of.Countries = n(),
Total.Population.In.Million = sum (Total.Population.2017)/1000000,
Countries.With.Low.Income = sum(IncomeGroup == "Low income"),
Average.GDP.per.Capita= mean(GDP.per.capita.2017, na.rm= TRUE),
Median.GDP.per.Capita= median(GDP.per.capita.2017, na.rm= TRUE),
Std.Deviation.GDP.per.Capita = sd(GDP.per.capita.2017, na.rm= TRUE),
Min.Under.5.Mortality.Rate = min(Under.5.Mortality.Rate.2017,na.rm=TRUE),
Max.Under.5.Mortality.Rate = max(Under.5.Mortality.Rate.2017,na.rm=TRUE))
library(readr)
library((readxl))
library((readxl))
## Setting up the Working directory
setwd("F:/Workspace/Working With R/DataSets") # TO set a Working Dir
# Import first dataset
Countries = read_csv("Countries+Population.csv")
summary(Countries)
# Clean column names and set right data types
colnames(Countries) = make.names(colnames(Countries))
Countries$Country.Name = as.factor(Countries$Country.Name)
Countries$Country.Code = as.factor(Countries$Country.Code)
summary(Countries)
# Import second dataset
Countries_Map = readxl::read_excel("Countries Region Mapping.xlsx")
View(Countries_Map)
# Set right data types
Countries_Map$Country.Code = as.factor(Countries_Map$Country.Code)
Countries_Map$Region = as.factor(Countries_Map$Region)
Countries_Map$IncomeGroup = as.factor(Countries_Map$IncomeGroup)
summary(Countries_Map$IncomeGroup)
# Set to ordered factor, and give order
Countries_Map$IncomeGroup = ordered(Countries_Map$IncomeGroup, levels = c("Low income",
"Lower middle income",
"Upper middle income",
"High income"))
class(Countries_Map$IncomeGroup)
summary(Countries_Map$IncomeGroup)
# Import Third Dataset
Countries_Info = read_csv("Countries+Indicators.csv")
colnames(Countries_Info) = make.names(colnames(Countries_Info))
Countries_Info$Country.Code = as.factor(Countri)
summary(Countries_Info)
# Correct Inner Join
Countries_All = merge(Countries, Countries_Map, by = "Country.Code")
# Correct Left Join
Countries_All = merge(Countries_All, Countries_Info, by = "Country.Code", all.x = TRUE)
## table()
Region_vs_Income_Cat = table(Countries_All$Region, Countries_All$IncomeGroup)
Region_vs_Income_Cat
prop.table(Region_vs_Income_Cat, 1) # Row Total is equal to 1
prop.table(Region_vs_Income_Cat, 2) # Column Total is equal to 1
## %>% group_by()
install.packages("dplyr")
library(dplyr)
# Extract the different Regions
Region_Sum = Countries_All %>% group_by(Region) %>% summarise()
View(Region_Sum)
# Extract different combination of Regions and Income Groups
Region_Income_Sum = Countries_All %>% group_by(Region, IncomeGroup) %>% summarise()
View(Region_Income_Sum)
# Same with amount of countries in each categories
# Region_Income_Sum = Countries_All %>% group_by(Region, IncomeGroup) %>% summarise(Count = n())
Region_Income_Sum = Countries_All %>% group_by(Region, IncomeGroup) %>% summarise(Number.Of.Countries = n())
View(Region_Income_Sum)
# Amount of different income groups per region
Region_sum = Countries_All %>% group_by(Region) %>% summarise(Different.Income.Groups = n_distinct(IncomeGroup))
View(Region_sum)
## Big Summary about each region
Region_sum= Countries_All %>% group_by(Region) %>% summarise(Number.of.Countries = n(),
Total.Population.In.Million = sum (Total.Population.2017)/1000000,
Countries.With.Low.Income = sum(IncomeGroup == "Low income"),
Average.GDP.per.Capita= mean(GDP.per.capita.2017, na.rm= TRUE),
Median.GDP.per.Capita= median(GDP.per.capita.2017, na.rm= TRUE),
Std.Deviation.GDP.per.Capita = sd(GDP.per.capita.2017, na.rm= TRUE),
Min.Under.5.Mortality.Rate = min(Under.5.Mortality.Rate.2017,na.rm=TRUE),
Max.Under.5.Mortality.Rate = max(Under.5.Mortality.Rate.2017,na.rm=TRUE))
Countries_All = readRDS("As_RDS_Countries_All_Data_2017.RDS")
# Re-import RDS
View(readRDS("As_RDS_Countries_All_Data_2017.RDS"))
# As RDS object
saveRDS(Countries_All, "As_RDS_Countries_All_Data_2017.RDS")
# setwd("F:/Workspace/Working With R/DataSets") # TO set a Working Dir
setwd("/media/user/Alpha/Workspace/Working With R/DataSets") # TO set a Working Dir
Countries_All = readRDS("As_RDS_Countries_All_Data_2017.RDS")
summary(Countries_All)
summary(Countries_All)
Countries_All = readRDS("As_RDS_Countries_All_Data_2017.RDS")
summary(Countries_All)
# Import ggplot2 package for graph
install.packages('ggplot2')
library(ggplot2)
# Default: Histogram
qplot(GDP.per.capita.2017, data=Countries_All)
summary(Countries_All)
View(Countries_All)
# Default: Histogram
qplot(GDP.per.capita.2017, data=Countries_All)
# Add title and labels:
qplot(GDP.per.capita.2017, data=Countries_All,
main="GDP per Capita Distributation in 2017",
xlab="GDP per Capita",
ylab="Frequency")
# Save plot in global environment
p = qplot(GDP.per.capita.2017, data=Countries_All,
main="SAVED- GDP per Capita Distributation in 2017",
xlab="GDP per Capita",
ylab="Frequency")
# Call object
p
# Density
qplot(GDP.per.capita.2017, data=Countries_All, geon="density",
main="GDP per Capita Distributation in 2017",
xlab="GDP per Capita",
ylab="Density")
# Density
qplot(GDP.per.capita.2017, data=Countries_All, geon="density",
main="GDP per Capita Distributation in 2017",
xlab="GDP per Capita",
ylab="Density")
# Density
qplot(GDP.per.capita.2017, data=Countries_All, geom="density",
main="GDP per Capita Distributation in 2017",
xlab="GDP per Capita",
ylab="Density")
### Categorial Distribution
qplot(Region, data=Countries_All,
main="Region Distribution",
xlab="Region",
ylab="Frequency")
# Default: Dot plot
qplot(Region,Under.5.Mortality.Rate.2017,data=Countries_Sub,
main = "Mortality Rate Distribution per Region",
xlab = "Region",
ylab = "Under 5 Mortality Rate")
# Default: Dot plot
qplot(Region,Under.5.Mortality.Rate.2017,data=Countries_Sub,
main = "Mortality Rate Distribution per Region",
xlab = "Region",
ylab = "Under 5 Mortality Rate")
# Default: Dot plot
qplot(Region,Under.5.Mortality.Rate.2017,data=Countries_Sub,
main = "Mortality Rate Distribution per Region",
xlab = "Region",
ylab = "Under 5 Mortality Rate")
qplot(Region, data=Countries_All,
main="Region Distribution",
xlab="Region",
ylab="Frequency")
qplot(Region,Under.5.Mortality.Rate.2017,data=Countries_Sub,
main = "Mortality Rate Distribution per Region",
xlab = "Region",
ylab = "Under 5 Mortality Rate")
# setwd("F:/Workspace/Working With R/DataSets") # TO set a Working Dir
setwd("/media/user/Alpha/Workspace/Working With R/DataSets") # TO set a Working Dir
# Import RDS file
Countries_All = readRDS("As_RDS_Countries_All_Data_2017.RDS")
summary(Countries_All)
View(Countries_All)
# Import ggplot2 package for graph
install.packages('ggplot2')
install.packages("ggplot2")
# Import ggplot2 package for graph
library(ggplot2)
### Categorial Distribution
qplot(Region, data=Countries_All,
main="Region Distribution",
xlab="Region",
ylab="Frequency")
# Default: Dot plot
qplot(Region,Under.5.Mortality.Rate.2017,data=Countries_Sub,
main = "Mortality Rate Distribution per Region",
xlab = "Region",
ylab = "Under 5 Mortality Rate")
# Default: Dot plot
qplot(Region,Under.5.Mortality.Rate.2017,data=Countries_All,
main = "Mortality Rate Distribution per Region",
xlab = "Region",
ylab = "Under 5 Mortality Rate")
# Box plot
qplot(Region, Under.5.Mortality.Rate.2017,data=Countries_Sub, geom= "boxplot",
main = "Mortality Rate Distribution per Region",
xlab = "Region",
ylab = "Under 5 Mortality Rate")
# Box plot
qplot(Region, Under.5.Mortality.Rate.2017,data=Countries_All, geom= "boxplot",
main = "Mortality Rate Distribution per Region",
xlab = "Region",
ylab = "Under 5 Mortality Rate")
# Colored Density plot
qplot( Under.5.Mortality.Rate.2017,fill = Region, data=Countries_All, geom= "density", alpha=I(.8),
main = "Mortality Rate Distribution per Region",
xlab = "Under 5 Mortality Rate",
ylab = "Density")
# Colored Density plot
qplot( Under.5.Mortality.Rate.2017,fill = Region, data=Countries_All, geom= "density",
main = "Mortality Rate Distribution per Region",
xlab = "Under 5 Mortality Rate",
ylab = "Density")
alpha=I(.8),
alpha=I(.8),
alpha=I(.8),
# Colored Density plot
qplot( Under.5.Mortality.Rate.2017,fill = Region, data=Countries_All, geom= "density", alpha=I(.8),
main = "Mortality Rate Distribution per Region",
xlab = "Under 5 Mortality Rate",
ylab = "Density")
setwd("/media/user/Alpha/Workspace/Working With R/DataSets") # TO set a Working Dir
# Import RDS file
Countries_All = readRDS("As_RDS_Countries_All_Data_2017.RDS")
summary(Countries_All)
View(Countries_All)
# Import ggplot2 package for graph
library(ggplot2)
# Colored bar plot
qplot(Region,fill=IncomeGroup,data=Countries_Sub, geom= "bar",
main = "Income Group Distribution per Region",
xlab = "Region",
ylab = "Frequency")
# Colored bar plot
qplot(Region,fill=IncomeGroup,data=Countries_All, geom= "bar",
main = "Income Group Distribution per Region",
xlab = "Region",
ylab = "Frequency")
# Default: Dot plot
qplot(GDP.per.capita.2017, Under.5.Mortality.Rate.2017,data=Countries_All,
main = "Mortality Rate Distribution against Countries' GDP per Capita in 2017",
xlab = "GDP per Capita",
ylab = "Under 5 Mortality Rate")
#Colored Dot plot
qplot(GDP.per.capita.2017, Under.5.Mortality.Rate.2017, color = Region, data=Countries_All,
main = "Mortality Rate Distribution against Countries' GDP per Capita in 2017",
xlab = "GDP per Capita",
ylab = "Under 5 Mortality Rate")
## Save last plot as an image
ggsave('Mortality_Rate_GDP_Region.jpeg', width = 9, height = 6)
## Save any plot from global environment as an image
ggsave('GDP_per_Capita_Distrib.jpeg',p, width = 9, height = 6)
